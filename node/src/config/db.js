import mongoose from 'mongoose';

// Railway ◊û◊°◊§◊ß MONGO_URL ◊ê◊ï◊ò◊ï◊û◊ò◊ô◊™ ◊õ◊©◊ê◊™◊î ◊û◊ï◊°◊ô◊£ MongoDB service
// ◊†◊°◊î ◊í◊ù DATABASE_URL ◊õ◊í◊ô◊ë◊ï◊ô (◊ú◊§◊¢◊û◊ô◊ù Railway ◊û◊©◊™◊û◊© ◊ë◊ñ◊î)
const uri = process.env.MONGO_URL || 
           process.env.DATABASE_URL || 
           "mongodb://localhost:27017/Smart-Wash-Car";

if (!uri) {
  console.error('‚ùå MONGO_URI is missing - check Railway environment variables');
  process.exit(1);
}

// ◊î◊¶◊í◊™ ◊°◊ï◊í ◊î◊°◊ë◊ô◊ë◊î (◊ë◊ú◊ô ◊ó◊©◊ô◊§◊™ ◊î◊°◊ô◊°◊û◊î)
const isLocal = uri.includes('localhost');
console.log(`üåê Connecting to ${isLocal ? 'Local' : 'Railway'} MongoDB...`);

mongoose
  .connect(uri, { 
    autoIndex: true,
    // ◊î◊í◊ì◊®◊ï◊™ ◊†◊ï◊°◊§◊ï◊™ ◊ú◊§◊®◊ï◊ì◊ß◊©◊ü
    serverSelectionTimeoutMS: 5000, // timeout ◊ê◊ó◊®◊ô 5 ◊©◊†◊ô◊ï◊™
    socketTimeoutMS: 45000, // timeout ◊ú◊ó◊ô◊ë◊ï◊®
    maxPoolSize: 10 // ◊û◊í◊ë◊ú◊™ ◊ó◊ô◊ë◊ï◊®◊ô◊ù ◊û◊ß◊°◊ô◊û◊ú◊ô◊™
  })
  .then(() => {
    console.log(`‚úÖ MongoDB connected successfully`);
    console.log(`üìä Database: ${mongoose.connection.db.databaseName}`);
  })
  .catch((err) => {
    console.error('‚ùå MongoDB connection error:', err.message);
    
    // ◊î◊ï◊°◊§◊™ ◊û◊ô◊ì◊¢ ◊ú◊ì◊ô◊ë◊ï◊í
    if (err.code === 'ENOTFOUND') {
      console.error('üí° Check if MONGO_URL environment variable is set correctly');
    }
    
    process.exit(1);
  });

// ◊ò◊ô◊§◊ï◊ú ◊ë◊°◊í◊ô◊®◊™ ◊ó◊ô◊ë◊ï◊® ◊†◊ß◊ô◊ô◊î
process.on('SIGINT', async () => {
  try {
    await mongoose.connection.close();
    console.log('‚úÖ MongoDB connection closed cleanly');
    process.exit(0);
  } catch (err) {
    console.error('‚ùå Error closing MongoDB connection:', err);
    process.exit(1);
  }
});